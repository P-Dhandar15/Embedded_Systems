


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ;    FreeRTOS V9.0.0rc2 - Copyright (C) 2016 Real Time E
                       ngineers Ltd.
    3 00000000         ;    All rights reserved
    4 00000000         ; 
    5 00000000         ;
    6 00000000         ;    ***************************************************
                       ************************
    7 00000000         ;     *                                                 
                                             *
    8 00000000         ;     *    FreeRTOS tutorial books are available in pdf 
                       and paperback.        *
    9 00000000         ;     *    Complete, revised, and edited pdf reference m
                       anuals are also       *
   10 00000000         ;     *    available.                                   
                                             *
   11 00000000         ;     *                                                 
                                             *
   12 00000000         ;     *    Purchasing FreeRTOS documentation will not on
                       ly help you, by       *
   13 00000000         ;     *    ensuring you get running as quickly as possib
                       le and with an        *
   14 00000000         ;     *    in-depth knowledge of how to use FreeRTOS, it
                        will also help       *
   15 00000000         ;     *    the FreeRTOS project to continue with its mis
                       sion of providing     *
   16 00000000         ;     *    professional grade, cross platform, de facto 
                       standard solutions    *
   17 00000000         ;     *    for microcontrollers - completely free of cha
                       rge!                  *
   18 00000000         ;     *                                                 
                                             *
   19 00000000         ;     *    >>> See http://www.FreeRTOS.org/Documentation
                        for details. <<<     *
   20 00000000         ;     *                                                 
                                             *
   21 00000000         ;     *    Thank you for using FreeRTOS, and thank you f
                       or your support!      *
   22 00000000         ;     *                                                 
                                             *
   23 00000000         ;    ***************************************************
                       ************************
   24 00000000         ;
   25 00000000         ;
   26 00000000         ;    This file is part of the FreeRTOS distribution.
   27 00000000         ;
   28 00000000         ;    FreeRTOS is free software; you can redistribute it 
                       and/or modify it under
   29 00000000         ;    the terms of the GNU General Public License (versio
                       n 2) as published by the
   30 00000000         ;    Free Software Foundation AND MODIFIED BY the FreeRT
                       OS exception.
   31 00000000         ;    >>>NOTE<<< The modification to the GPL is included 
                       to allow you to
   32 00000000         ;    distribute a combined work that includes FreeRTOS w
                       ithout being obliged to
   33 00000000         ;    provide the source code for proprietary components 
                       outside of the FreeRTOS
   34 00000000         ;    kernel.  FreeRTOS is distributed in the hope that i



ARM Macro Assembler    Page 2 


                       t will be useful, but
   35 00000000         ;    WITHOUT ANY WARRANTY; without even the implied warr
                       anty of MERCHANTABILITY
   36 00000000         ;    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU G
                       eneral Public License for
   37 00000000         ;    more details. You should have received a copy of th
                       e GNU General Public
   38 00000000         ;    License and the FreeRTOS license exception along wi
                       th FreeRTOS; if not it
   39 00000000         ;    can be viewed here: http://www.freertos.org/a00114.
                       html and also obtained
   40 00000000         ;    by writing to Richard Barry, contact details for wh
                       om are available on the
   41 00000000         ;    FreeRTOS WEB site.
   42 00000000         ;
   43 00000000         ;    1 tab == 4 spaces!
   44 00000000         ;
   45 00000000         ;    http://www.FreeRTOS.org - Documentation, latest inf
                       ormation, license and
   46 00000000         ;    contact details.
   47 00000000         ;
   48 00000000         ;    http://www.SafeRTOS.com - A version that is certifi
                       ed for use in safety
   49 00000000         ;    critical systems.
   50 00000000         ;
   51 00000000         ;    http://www.OpenRTOS.com - Commercial support, devel
                       opment, porting,
   52 00000000         ;    licensing and training services.
   53 00000000         ;*/
   54 00000000         
   55 00000000                 INCLUDE          portmacro.inc
    1 00000000         ;/*
    2 00000000         ;    FreeRTOS V9.0.0rc2 - Copyright (C) 2016 Real Time E
                       ngineers Ltd.
    3 00000000         ;    All rights reserved
    4 00000000         ; 
    5 00000000         ;
    6 00000000         ;    ***************************************************
                       ************************
    7 00000000         ;     *                                                 
                                             *
    8 00000000         ;     *    FreeRTOS tutorial books are available in pdf 
                       and paperback.        *
    9 00000000         ;     *    Complete, revised, and edited pdf reference m
                       anuals are also       *
   10 00000000         ;     *    available.                                   
                                             *
   11 00000000         ;     *                                                 
                                             *
   12 00000000         ;     *    Purchasing FreeRTOS documentation will not on
                       ly help you, by       *
   13 00000000         ;     *    ensuring you get running as quickly as possib
                       le and with an        *
   14 00000000         ;     *    in-depth knowledge of how to use FreeRTOS, it
                        will also help       *
   15 00000000         ;     *    the FreeRTOS project to continue with its mis
                       sion of providing     *
   16 00000000         ;     *    professional grade, cross platform, de facto 
                       standard solutions    *



ARM Macro Assembler    Page 3 


   17 00000000         ;     *    for microcontrollers - completely free of cha
                       rge!                  *
   18 00000000         ;     *                                                 
                                             *
   19 00000000         ;     *    >>> See http://www.FreeRTOS.org/Documentation
                        for details. <<<     *
   20 00000000         ;     *                                                 
                                             *
   21 00000000         ;     *    Thank you for using FreeRTOS, and thank you f
                       or your support!      *
   22 00000000         ;     *                                                 
                                             *
   23 00000000         ;    ***************************************************
                       ************************
   24 00000000         ;
   25 00000000         ;
   26 00000000         ;    This file is part of the FreeRTOS distribution.
   27 00000000         ;
   28 00000000         ;    FreeRTOS is free software; you can redistribute it 
                       and/or modify it under
   29 00000000         ;    the terms of the GNU General Public License (versio
                       n 2) as published by the
   30 00000000         ;    Free Software Foundation AND MODIFIED BY the FreeRT
                       OS exception.
   31 00000000         ;    >>>NOTE<<< The modification to the GPL is included 
                       to allow you to
   32 00000000         ;    distribute a combined work that includes FreeRTOS w
                       ithout being obliged to
   33 00000000         ;    provide the source code for proprietary components 
                       outside of the FreeRTOS
   34 00000000         ;    kernel.  FreeRTOS is distributed in the hope that i
                       t will be useful, but
   35 00000000         ;    WITHOUT ANY WARRANTY; without even the implied warr
                       anty of MERCHANTABILITY
   36 00000000         ;    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU G
                       eneral Public License for
   37 00000000         ;    more details. You should have received a copy of th
                       e GNU General Public
   38 00000000         ;    License and the FreeRTOS license exception along wi
                       th FreeRTOS; if not it
   39 00000000         ;    can be viewed here: http://www.freertos.org/a00114.
                       html and also obtained
   40 00000000         ;    by writing to Richard Barry, contact details for wh
                       om are available on the
   41 00000000         ;    FreeRTOS WEB site.
   42 00000000         ;
   43 00000000         ;    1 tab == 4 spaces!
   44 00000000         ;
   45 00000000         ;    http://www.FreeRTOS.org - Documentation, latest inf
                       ormation, license and
   46 00000000         ;    contact details.
   47 00000000         ;
   48 00000000         ;    http://www.SafeRTOS.com - A version that is certifi
                       ed for use in safety
   49 00000000         ;    critical systems.
   50 00000000         ;
   51 00000000         ;    http://www.OpenRTOS.com - Commercial support, devel
                       opment, porting,
   52 00000000         ;    licensing and training services.



ARM Macro Assembler    Page 4 


   53 00000000         ;*/
   54 00000000         
   55 00000000                 IMPORT           ulCriticalNesting ;
   56 00000000                 IMPORT           pxCurrentTCB ;
   57 00000000         
   58 00000000         
   59 00000000                 MACRO
   60 00000000                 portRESTORE_CONTEXT
   61 00000000         
   62 00000000         
   63 00000000                 LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   64 00000000                 LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   65 00000000                 LDR              LR, [R0]
   66 00000000         
   67 00000000                 LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on... 
   68 00000000                 LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   69 00000000                 STR              R1, [R0]    ;
   70 00000000         
   71 00000000                 LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   72 00000000                 MSR              SPSR_cxsf, R0 ;
   73 00000000         
   74 00000000                 LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   75 00000000                 NOP                          ;
   76 00000000         
   77 00000000                 LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   78 00000000         
   79 00000000         ; And return - correcting the offset in the LR to obtain
                        ...
   80 00000000                 SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   81 00000000         
   82 00000000                 MEND
   83 00000000         
   84 00000000         ; /*****************************************************
                       *****************/
   85 00000000         
   86 00000000                 MACRO
   87 00000000                 portSAVE_CONTEXT
   88 00000000         
   89 00000000         
   90 00000000                 STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   91 00000000         
   92 00000000                 STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po



ARM Macro Assembler    Page 5 


                                                            inter.
   93 00000000                 NOP                          ;
   94 00000000                 SUB              SP, SP, #4  ;
   95 00000000                 LDMIA            SP!,{R0}    ;
   96 00000000         
   97 00000000                 STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
   98 00000000                 MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
   99 00000000                 LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
  100 00000000         
  101 00000000                 STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
  102 00000000                 NOP                          ;
  103 00000000                 SUB              LR, LR, #60 ;
  104 00000000         
  105 00000000                 MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
  106 00000000                 STMDB            LR!, {R0}   ;
  107 00000000         
  108 00000000                 LDR              R0, =ulCriticalNesting ;
  109 00000000                 LDR              R0, [R0]    ;
  110 00000000                 STMDB            LR!, {R0}   ;
  111 00000000         
  112 00000000                 LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
  113 00000000                 LDR              R1, [R0]    ;    
  114 00000000                 STR              LR, [R1]    ;
  115 00000000         
  116 00000000                 MEND
  117 00000000         
  118 00000000                 END
   56 00000000         
   57 00000000                 IMPORT           vTaskSwitchContext
   58 00000000                 IMPORT           xTaskIncrementTick
   59 00000000         
   60 00000000                 EXPORT           vPortYieldProcessor
   61 00000000                 EXPORT           vPortStartFirstTask
   62 00000000                 EXPORT           vPreemptiveTick
   63 00000000                 EXPORT           vPortYield
   64 00000000         
   65 00000000         
   66 00000000 FFFFF030 
                       VICVECTADDR
                               EQU              0xFFFFF030
   67 00000000 E0004000 
                       T0IR    EQU              0xE0004000
   68 00000000 00000001 
                       T0MATCHBIT
                               EQU              0x00000001
   69 00000000         
   70 00000000                 ARM



ARM Macro Assembler    Page 6 


   71 00000000                 AREA             PORT_ASM, CODE, READONLY
   72 00000000         
   73 00000000         
   74 00000000         
   75 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   76 00000000         ; Starting the first task is done by just restoring the 
                       context 
   77 00000000         ; setup by pxPortInitialiseStack
   78 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   79 00000000         vPortStartFirstTask
   80 00000000         
   81 00000000                 PRESERVE8
   82 00000000         
   83 00000000                 portRESTORE_CONTEXT
   61 00000000         
   62 00000000         
   63 00000000 E59F016C        LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   64 00000004 E5900000        LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   65 00000008 E590E000        LDR              LR, [R0]
   66 0000000C         
   67 0000000C E59F0164        LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on... 
   68 00000010 E8BE0002        LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   69 00000014 E5801000        STR              R1, [R0]    ;
   70 00000018         
   71 00000018 E8BE0001        LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   72 0000001C E16FF000        MSR              SPSR_cxsf, R0 ;
   73 00000020         
   74 00000020 E8DE7FFF        LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   75 00000024 E1A00000        NOP                          ;
   76 00000028         
   77 00000028 E59EE03C        LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   78 0000002C         
   79 0000002C         ; And return - correcting the offset in the LR to obtain
                        ...
   80 0000002C E25EF004        SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   81 00000030         
   84 00000030         
   85 00000030         vPortYield
   86 00000030         
   87 00000030                 PRESERVE8
   88 00000030         
   89 00000030 EF000000        SVC              0
   90 00000034 E12FFF1E        bx               lr



ARM Macro Assembler    Page 7 


   91 00000038         
   92 00000038         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   93 00000038         ; Interrupt service routine for the SWI interrupt.  The 
                       vector table is
   94 00000038         ; configured in the startup.s file.
   95 00000038         ;
   96 00000038         ; vPortYieldProcessor() is used to manually force a cont
                       ext switch.  The
   97 00000038         ; SWI interrupt is generated by a call to taskYIELD() or
                        portYIELD().
   98 00000038         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   99 00000038         
  100 00000038         vPortYieldProcessor
  101 00000038         
  102 00000038                 PRESERVE8
  103 00000038         
  104 00000038         ; Within an IRQ ISR the link register has an offset from
                        the true return 
  105 00000038         ; address, but an SWI ISR does not.  Add the offset manu
                       ally so the same 
  106 00000038         ; ISR return code can be used in both cases.
  107 00000038 E28EE004        ADD              LR, LR, #4
  108 0000003C         
  109 0000003C         ; Perform the context switch.
  110 0000003C                 portSAVE_CONTEXT             ; Save current task
                                                             context    
   88 0000003C         
   89 0000003C         
   90 0000003C E92D0001        STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   91 00000040         
   92 00000040 E94D2000        STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po
                                                            inter.
   93 00000044 E1A00000        NOP                          ;
   94 00000048 E24DD004        SUB              SP, SP, #4  ;
   95 0000004C E8BD0001        LDMIA            SP!,{R0}    ;
   96 00000050         
   97 00000050 E9204000        STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
   98 00000054 E1A0E000        MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
   99 00000058 E8BD0001        LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
  100 0000005C         
  101 0000005C E94E7FFF        STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
  102 00000060 E1A00000        NOP                          ;
  103 00000064 E24EE03C        SUB              LR, LR, #60 ;
  104 00000068         
  105 00000068 E14F0000        MRS              R0, SPSR    ; Push the SPSR ont



ARM Macro Assembler    Page 8 


                                                            o the task stack.
  106 0000006C E92E0001        STMDB            LR!, {R0}   ;
  107 00000070         
  108 00000070 E59F0100        LDR              R0, =ulCriticalNesting ;
  109 00000074 E5900000        LDR              R0, [R0]    ;
  110 00000078 E92E0001        STMDB            LR!, {R0}   ;
  111 0000007C         
  112 0000007C E59F00F0        LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
  113 00000080 E5901000        LDR              R1, [R0]    ;    
  114 00000084 E581E000        STR              LR, [R1]    ;
  115 00000088         
  111 00000088 E59F00EC        LDR              R0, =vTaskSwitchContext ; Get t
                                                            he address of the c
                                                            ontext switch funct
                                                            ion
  112 0000008C E1A0E00F        MOV              LR, PC      ; Store the return 
                                                            address
  113 00000090 E12FFF10        BX               R0          ; Call the contedxt
                                                             switch function
  114 00000094                 portRESTORE_CONTEXT          ; restore the conte
                                                            xt of the selected 
                                                            task 
   61 00000094         
   62 00000094         
   63 00000094 E59F00D8        LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   64 00000098 E5900000        LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   65 0000009C E590E000        LDR              LR, [R0]
   66 000000A0         
   67 000000A0 E59F00D0        LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on... 
   68 000000A4 E8BE0002        LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   69 000000A8 E5801000        STR              R1, [R0]    ;
   70 000000AC         
   71 000000AC E8BE0001        LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   72 000000B0 E16FF000        MSR              SPSR_cxsf, R0 ;
   73 000000B4         
   74 000000B4 E8DE7FFF        LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   75 000000B8 E1A00000        NOP                          ;
   76 000000BC         
   77 000000BC E59EE03C        LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   78 000000C0         
   79 000000C0         ; And return - correcting the offset in the LR to obtain
                        ...
   80 000000C0 E25EF004        SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.



ARM Macro Assembler    Page 9 


   81 000000C4         
  115 000000C4         
  116 000000C4         
  117 000000C4         
  118 000000C4         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;
  119 000000C4         ; Interrupt service routine for preemptive scheduler tic
                       k timer
  120 000000C4         ; Only used if portUSE_PREEMPTION is set to 1 in portmac
                       ro.h
  121 000000C4         ;
  122 000000C4         ; Uses timer 0 of LPC21XX Family
  123 000000C4         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;; 
  124 000000C4         
  125 000000C4         vPreemptiveTick
  126 000000C4         
  127 000000C4                 PRESERVE8
  128 000000C4         
  129 000000C4                 portSAVE_CONTEXT             ; Save the context 
                                                            of the current task
                                                            . 
   88 000000C4         
   89 000000C4         
   90 000000C4 E92D0001        STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   91 000000C8         
   92 000000C8 E94D2000        STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po
                                                            inter.
   93 000000CC E1A00000        NOP                          ;
   94 000000D0 E24DD004        SUB              SP, SP, #4  ;
   95 000000D4 E8BD0001        LDMIA            SP!,{R0}    ;
   96 000000D8         
   97 000000D8 E9204000        STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
   98 000000DC E1A0E000        MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
   99 000000E0 E8BD0001        LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
  100 000000E4         
  101 000000E4 E94E7FFF        STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
  102 000000E8 E1A00000        NOP                          ;
  103 000000EC E24EE03C        SUB              LR, LR, #60 ;
  104 000000F0         
  105 000000F0 E14F0000        MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
  106 000000F4 E92E0001        STMDB            LR!, {R0}   ;
  107 000000F8         
  108 000000F8 E59F0078        LDR              R0, =ulCriticalNesting ;
  109 000000FC E5900000        LDR              R0, [R0]    ;
  110 00000100 E92E0001        STMDB            LR!, {R0}   ;



ARM Macro Assembler    Page 10 


  111 00000104         
  112 00000104 E59F0068        LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
  113 00000108 E5901000        LDR              R1, [R0]    ;    
  114 0000010C E581E000        STR              LR, [R1]    ;
  115 00000110         
  130 00000110         
  131 00000110 E59F0068        LDR              R0, =xTaskIncrementTick ; Incre
                                                            ment the tick count
                                                            .  
  132 00000114 E1A0E00F        MOV              LR, PC      ; This may make a d
                                                            elayed task ready
  133 00000118 E12FFF10        BX               R0          ; to run.
  134 0000011C         
  135 0000011C E3500000        CMP              R0, #0
  136 00000120 0A000002        BEQ              SkipContextSwitch
  137 00000124 E59F0050        LDR              R0, =vTaskSwitchContext ; Find 
                                                            the highest priorit
                                                            y task that 
  138 00000128 E1A0E00F        MOV              LR, PC      ; is ready to run.
  139 0000012C E12FFF10        BX               R0
  140 00000130         SkipContextSwitch
  141 00000130 E3A00001        MOV              R0, #T0MATCHBIT ; Clear the tim
                                                            er event
  142 00000134 E59F1048        LDR              R1, =T0IR
  143 00000138 E5810000        STR              R0, [R1]
  144 0000013C         
  145 0000013C E59F0044        LDR              R0, =VICVECTADDR ; Acknowledge 
                                                            the interrupt 
  146 00000140 E5800000        STR              R0,[R0]
  147 00000144         
  148 00000144                 portRESTORE_CONTEXT          ; Restore the conte
                                                            xt of the highest 
   61 00000144         
   62 00000144         
   63 00000144 E59F0028        LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   64 00000148 E5900000        LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   65 0000014C E590E000        LDR              LR, [R0]
   66 00000150         
   67 00000150 E59F0020        LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on... 
   68 00000154 E8BE0002        LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   69 00000158 E5801000        STR              R1, [R0]    ;
   70 0000015C         
   71 0000015C E8BE0001        LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   72 00000160 E16FF000        MSR              SPSR_cxsf, R0 ;
   73 00000164         
   74 00000164 E8DE7FFF        LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 



ARM Macro Assembler    Page 11 


                                                            for the task.
   75 00000168 E1A00000        NOP                          ;
   76 0000016C         
   77 0000016C E59EE03C        LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   78 00000170         
   79 00000170         ; And return - correcting the offset in the LR to obtain
                        ...
   80 00000170 E25EF004        SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   81 00000174         
  149 00000174         ; priority task that is ready to run.
  150 00000174                 END
              00000000 
              00000000 
              00000000 
              00000000 
              E0004000 
              FFFFF030 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\portasm.d -o.\objects\portasm.o -IC:\Keil_v5\FreeRTOS_V9.0.0rc2\FreeRTOS
\Source\portable\RVDS\ARM7_LPC21xx -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__UVISION_VERSION SETA 525" --list=.\listings\portasm.lst portASM.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

PORT_ASM 00000000

Symbol: PORT_ASM
   Definitions
      At line 71 in file portASM.s
   Uses
      None
Comment: PORT_ASM unused
SkipContextSwitch 00000130

Symbol: SkipContextSwitch
   Definitions
      At line 140 in file portASM.s
   Uses
      At line 136 in file portASM.s
Comment: SkipContextSwitch used once
vPortStartFirstTask 00000000

Symbol: vPortStartFirstTask
   Definitions
      At line 79 in file portASM.s
   Uses
      At line 61 in file portASM.s
Comment: vPortStartFirstTask used once
vPortYield 00000030

Symbol: vPortYield
   Definitions
      At line 85 in file portASM.s
   Uses
      At line 63 in file portASM.s
Comment: vPortYield used once
vPortYieldProcessor 00000038

Symbol: vPortYieldProcessor
   Definitions
      At line 100 in file portASM.s
   Uses
      At line 60 in file portASM.s
Comment: vPortYieldProcessor used once
vPreemptiveTick 000000C4

Symbol: vPreemptiveTick
   Definitions
      At line 125 in file portASM.s
   Uses
      At line 62 in file portASM.s
Comment: vPreemptiveTick used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

T0IR E0004000

Symbol: T0IR
   Definitions
      At line 67 in file portASM.s
   Uses
      At line 142 in file portASM.s
Comment: T0IR used once
T0MATCHBIT 00000001

Symbol: T0MATCHBIT
   Definitions
      At line 68 in file portASM.s
   Uses
      At line 141 in file portASM.s
Comment: T0MATCHBIT used once
VICVECTADDR FFFFF030

Symbol: VICVECTADDR
   Definitions
      At line 66 in file portASM.s
   Uses
      At line 145 in file portASM.s
Comment: VICVECTADDR used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

pxCurrentTCB 00000000

Symbol: pxCurrentTCB
   Definitions
      At line 56 in file C:\Keil_v5\FreeRTOS_V9.0.0rc2\FreeRTOS\Source\portable
\RVDS\ARM7_LPC21xx\portmacro.inc
   Uses
      At line 63 in macro portRESTORE_CONTEXT
      at line 83 in file portASM.s
      At line 112 in macro portSAVE_CONTEXT
      at line 110 in file portASM.s

ulCriticalNesting 00000000

Symbol: ulCriticalNesting
   Definitions
      At line 55 in file C:\Keil_v5\FreeRTOS_V9.0.0rc2\FreeRTOS\Source\portable
\RVDS\ARM7_LPC21xx\portmacro.inc
   Uses
      At line 67 in macro portRESTORE_CONTEXT
      at line 83 in file portASM.s
      At line 108 in macro portSAVE_CONTEXT
      at line 110 in file portASM.s

vTaskSwitchContext 00000000

Symbol: vTaskSwitchContext
   Definitions
      At line 57 in file portASM.s
   Uses
      At line 111 in file portASM.s
      At line 137 in file portASM.s

xTaskIncrementTick 00000000

Symbol: xTaskIncrementTick
   Definitions
      At line 58 in file portASM.s
   Uses
      At line 131 in file portASM.s
Comment: xTaskIncrementTick used once
4 symbols
347 symbols in table
